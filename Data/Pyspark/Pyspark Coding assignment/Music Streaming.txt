Dataset: Music Streaming Data

Sample Data:
user_id,song_title,artist,duration_seconds,streaming_time,location
1,Blinding Lights,The Weeknd,200,2023-09-01 08:15:00,New York
2,Shape of You,Ed Sheeran,240,2023-09-01 09:20:00,Los Angeles
3,Levitating,Dua Lipa,180,2023-09-01 10:30:00,London
1,Starboy,The Weeknd,220,2023-09-01 11:00:00,New York
2,Perfect,Ed Sheeran,250,2023-09-01 12:15:00,Los Angeles
3,Don't Start Now,Dua Lipa,200,2023-09-02 08:10:00,London
1,Save Your Tears,The Weeknd,210,2023-09-02 09:00:00,New York
2,Galway Girl,Ed Sheeran,190,2023-09-02 10:00:00,Los Angeles
3,New Rules,Dua Lipa,230,2023-09-02 11:00:00,London

from pyspark.sql import SparkSession
from pyspark.sql.functions import sum,avg,col,row_number,collect_set,size,count,when

spark = SparkSession.builder.appName("Music Streaming").getOrCreate()
df = spark.read.csv("/content/sample_data/musicdata.csv", header=True, inferSchema=True)

Exercises:
1. Calculate the Total Listening Time for Each User
Group the data by user_id and calculate the total time spent streaming
(in seconds) for each user.

total_listening_time =
df.groupBy("user_id").agg(sum("duration_seconds").alias("total_listening_time"))
print("Total Listening Time for Each User:")
total_listening_time.show()

2. Filter Songs Streamed for More Than 200 Seconds
Filter the dataset to show only the songs where the duration_seconds is
greater than 200.

long_songs = df.filter(col("duration_seconds") > 200)
print("Songs Streamed for More Than 200 Seconds:")
long_songs.show()

3. Find the Most Popular Artist (by Total Streams)
Group the data by artist and find the artist with the most streams
(i.e., the highest number of song plays).

most_popular_artist =
df.groupBy("artist").agg(count("song_title").alias("total_streams")).orderBy(col("total_streams").desc())
print("Most Popular Artist:")
most_popular_artist.show(1)

4. Identify the Song with the Longest Duration
Identify the song with the longest duration in the dataset.

longest_song = df.orderBy(col("duration_seconds").desc()).limit(1)
print("Song with the Longest Duration:")
longest_song.show()

5. Calculate the Average Song Duration by Artist
Group the data by artist and calculate the average song duration for
each artist.

average_duration_per_artist = df.groupBy("artist").agg(avg("duration_seconds").alias("average_duration"))
print("Average Song Duration by Artist:")
average_duration_per_artist.show()

6. Find the Top 3 Most Streamed Songs per User
For each user, find the top 3 most-streamed songs (i.e., songs they played most frequently).

from pyspark.sql.window import Window
window = Window.partitionBy("user_id").orderBy(col("duration_seconds").desc())
top_songs_per_user = df.withColumn("rank", row_number().over(window)).filter(col("rank") <= 3)
print("Top 3 Most Streamed Songs per User:")
top_songs_per_user.show()

7. Calculate the Total Number of Streams per Day
Group the data by streaming_time (by extracting the date) and calculate
the total number of streams for each day.

from pyspark.sql.functions import to_date
streams_per_day = df.withColumn("streaming_date",
to_date("streaming_time")).groupBy("streaming_date").count()
print("Total Number of Streams per Day:")
streams_per_day.show()

8. Identify Users Who Streamed Songs from More Than One Artist
Find users who listened to songs by more than one artist.

users_multiple_artists = df.groupBy("user_id").agg(collect_set("artist").alias("artists_list"))
users_multiple_artists = users_multiple_artists.filter(size(col("artists_list")) > 1)
print("Users Who Streamed Songs from More Than One Artist:")
users_multiple_artists.show()

9. Calculate the Total Streams for Each Location
Group the data by location and calculate the total number of streams
for each location.

streams_per_location = df.groupBy("location").count().alias("total_streams")
print("Total Streams for Each Location:")
streams_per_location.show()

10. Create a New Column to Classify Long and Short Songs
Add a new column song_length that classifies a song as "Long" if
duration_seconds > 200 , otherwise classify it as "Short."

df_with_song_length = df.withColumn("song_length", when(col("duration_seconds") > 200,"Long").otherwise("Short"))
print("New Column to Classify Long and Short Songs:")
df_with_song_length.show()