Dataset: Banking Transactions
Sample Data:
transaction_id,customer_id,transaction_type,amount,transaction_date
1,201,Deposit,5000,2023-09-01
2,202,Withdrawal,2000,2023-09-01
3,203,Deposit,3000,2023-09-02
4,201,Withdrawal,1500,2023-09-02
5,204,Deposit,10000,2023-09-03
6,205,Withdrawal,500,2023-09-03
7,202,Deposit,2500,2023-09-04
8,206,Withdrawal,700,2023-09-04
9,203,Deposit,4000,2023-09-05
10,204,Withdrawal,3000,2023-09-05

!pip install pyspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import sum, avg, max, col, count, when
spark = SparkSession.builder.appName('BankingTransactions').getOrCreate()
data = spark.read.csv("/content/sample_data/banking_transactions.csv", header=True, inferSchema=True)

Exercises:
1. Calculate the Total Deposit and Withdrawal Amounts
Group the data by transaction_type and calculate the total amounts for
both deposits and withdrawals.

total_amounts = data.groupBy("transaction_type").agg(sum("amount").alias("total_amount"))
print("Total deposit and withdrawal amounts:")
total_amounts.show()

2. Filter Transactions Greater Than $3,000
Filter the dataset to show only transactions where the amount is
greater than $3,000.

transactions_gt_3000 = data.filter(data["amount"] > 3000)
print("Transactions greater than $3,000:")
transactions_gt_3000.show()

3. Find the Largest Deposit Made
Identify the transaction with the highest deposit amount.

largest_deposit = data.filter(data["transaction_type"] == "Deposit").orderBy(col("amount").desc()).limit(1)
print("Largest deposit made:")
largest_deposit.show()

4. Calculate the Average Transaction Amount for Each Transaction Type
Group the data by transaction_type and calculate the average amount for
deposits and withdrawals.

avg_amount_per_type = data.groupBy("transaction_type").agg(avg("amount").alias("avg_amount"))
print("Average transaction amount for each type:")
avg_amount_per_type.show()

5. Find Customers Who Made Both Deposits and Withdrawals
Identify customers who have made at least one deposit and one
withdrawal.

customers_with_both = banking_df.groupBy("customer_id").agg(
    countDistinct(when(col("transaction_type") == "Deposit", 1)).alias("deposit_count"),
    countDistinct(when(col("transaction_type") == "Withdrawal", 1)).alias("withdrawal_count")
).filter((col("deposit_count") > 0) & (col("withdrawal_count") > 0))

customers_with_both.show()

6. Calculate the Total Amount of Transactions per Day
Group the data by transaction_date and calculate the total amount of
all transactions for each day.

total_amount_per_day = data.groupBy("transaction_date").agg(sum("amount").alias("total_amount"))
print("Total amount of transactions per day:")
total_amount_per_day.show()

7. Find the Customer with the Highest Total Withdrawal
Calculate the total amount withdrawn by each customer and identify the
customer with the highest total withdrawal.

highest_withdrawl=banking_df.filter(banking_df.transaction_type=="Withdrawal").groupBy("customer_id").sum("amount").orderBy(desc("sum(amount)")).limit(1)
highest_withdrawl.show()

8. Calculate the Number of Transactions for Each Customer
Group the data by customer_id and calculate the total number of
transactions made by each customer.

transactions_per_customer = data.groupBy("customer_id").agg(count("transaction_id").alias("num_transactions"))
print("Number of transactions for each customer:")
transactions_per_customer.show()

9. Find All Transactions That Occurred on the Same Day as a Withdrawal Greater
Than $1,000.Filter the data to show all transactions that occurred on the same day
as a withdrawal of more than $1,000.

withdrawals_df = banking_df.filter((col("transaction_type") == "Withdrawal") & (col("amount") > 1000))
dates_with_large_withdrawals = withdrawals_df.select("transaction_date").distinct()
all_transactions_on_dates = banking_df.join(dates_with_large_withdrawals, on="transaction_date", how="inner")
all_transactions_on_dates.show()


10. Create a New Column to Classify Transactions as "High" or "Low" Value
Add a new column transaction_value that classifies a transaction as
"High" if the amount is greater than $5,000, otherwise classify it as
"Low."

data = data.withColumn("transaction_value", when(data["amount"] > 5000, "High").otherwise("Low"))
print("New column to classify transactions:")
data.show()