Dataset: Retail Store Sales Data

Sample Data:
transaction_id,product_name,category,price,quantity,sales_date
1,Apple,Groceries,0.50,10,2023-09-01
2,T-shirt,Clothing,15.00,2,2023-09-01
3,Notebook,Stationery,2.00,5,2023-09-02
4,Banana,Groceries,0.30,12,2023-09-02
5,Laptop,Electronics,800.00,1,2023-09-03
6,Pants,Clothing,25.00,3,2023-09-03
7,Headphones,Electronics,100.00,2,2023-09-04
8,Pen,Stationery,1.00,10,2023-09-04
9,Orange,Groceries,0.60,8,2023-09-05
10,Sneakers,Clothing,50.00,1,2023-09-05

!pip install pyspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import sum, avg, max, min, col, count
spark = SparkSession.builder.appName('BankingTransactions').getOrCreate()
df_retail = spark.read.csv("/content/sample_data/banking_transactions.csv", header=True, inferSchema=True)

Exercises:
1. Calculate the Total Revenue per Category
Group the data by category and calculate the total revenue generated by
each category. (Hint: Multiply price by quantity for each
transaction.)

df_retail = df_retail.withColumn("total_revenue", col("price") * col("quantity"))
total_revenue_per_category = df_retail.groupBy("category").agg(sum("total_revenue").alias("total_revenue"))
total_revenue_per_category.show()

2. Filter Transactions Where the Total Sales Amount is Greater Than $100
Filter the dataset to show only transactions where the total sales
amount (price * quantity) is greater than $100.

df_sales_amount = df_retail.withColumn("total_sales_amount", col("price") * col("quantity"))
df_high_value_transactions = df_sales_amount.filter(col("total_sales_amount") > 100)
df_high_value_transactions.show()

3. Find the Most Sold Product
Identify the product with the highest total quantity sold across all
transactions.

quantity_per_product = df_retail.groupBy("product_name").agg(sum("quantity").alias("total_quantity"))
most_sold_product = quantity_per_product.orderBy(col("total_quantity").desc()).limit(1)
most_sold_product.show()


4. Calculate the Average Price per Product Category
Group the data by category and calculate the average price of products
in each category.

average_price_per_category = df_retail.groupBy("category").agg(avg("price").alias("average_price"))
average_price_per_category.show()

5. Find the Top 3 Highest Grossing Products
Calculate the total revenue for each product and identify the top 3
products that generated the most revenue.

revenue_per_product = df_retail.groupBy("product_name").agg(sum("total_revenue").alias("total_revenue"))
top_3_products = revenue_per_product.orderBy(col("total_revenue").desc()).limit(3)
top_3_products.show()

6. Calculate the Total Number of Items Sold per Day
Group the data by sales_date and calculate the total quantity of items
sold for each day.

total_items_per_day = df_retail.groupBy("sales_date").agg(sum("quantity").alias("total_items_sold"))
total_items_per_day.show()

7. Identify the Product with the Lowest Price in Each Category
For each category, identify the product with the lowest price.

min_price_per_category = df_retail.groupBy("category").agg(min("price").alias("min_price"))
product_with_lowest_price = df_retail.alias("df1").join(
    min_price_per_category.alias("df2"),
    (col("df1.category") == col("df2.category")) & (col("df1.price") == col("df2.min_price"))
).select(
    col("df1.category"),
    col("df1.product_name"),
    col("df1.price")
)
product_with_lowest_price.show()

8. Calculate the Total Revenue for Each Product
Group the data by product_name and calculate the total revenue
generated by each product.

total_revenue_per_product = df_retail.groupBy("product_name").agg(sum("total_revenue").alias("total_revenue"))
total_revenue_per_product.show()

9. Find the Total Sales per Day for Each Category
Group the data by sales_date and category to calculate the total sales
for each category per day.

total_sales_per_day_category = df_retail.groupBy("sales_date", "category").agg(sum("total_revenue").alias("total_sales"))
total_sales_per_day_category.show()

10. Create a New Column for Discounted Price
Add a new column called discounted_price that applies a 10% discount to
the original price for each product ( price * 0.9 ).

df_retail = df_retail.withColumn("discounted_price", col("price") * 0.9)
df_retail.show()