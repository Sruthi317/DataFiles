Dataset: Health & Fitness Tracker Data

Sample Data:
user_id,date,steps,calories_burned,hours_of_sleep,workout_type
1,2023-09-01,12000,500,7,Cardio
2,2023-09-01,8000,400,6.5,Strength
3,2023-09-01,15000,650,8,Yoga
1,2023-09-02,10000,450,6,Cardio
2,2023-09-02,9500,500,7,Cardio
3,2023-09-02,14000,600,7.5,Strength
1,2023-09-03,13000,550,8,Yoga
2,2023-09-03,12000,520,6.5,Yoga
3,2023-09-03,16000,700,7,Cardio

!pip install pyspark

from pyspark.sql import SparkSession
from pyspark.sql.functions import *

spark=SparkSession.builder.appName('Health_Fitness').getOrCreate()
csv_path="/content/sample_data/Health_Fitness.csv"
df_fitness=spark.read.csv(csv_path,header=True,inferSchema=True)
df_fitness.show()

Exercises:
1. Find the Total Steps Taken by Each User
Group the data by user_id and calculate the total steps taken by each
user across all days.

total_steps_per_user = df_fitness.groupBy("user_id").agg(sum("steps").alias("total_steps"))
total_steps_per_user.show()

2. Filter Days with More Than 10,000 Steps
Filter the dataset to show only the days where the user took more than
10,000 steps.

df_high_steps = df_fitness.filter(col("steps") > 10000)
df_high_steps.show()

3. Calculate the Average Calories Burned by Workout Type
Group the data by workout_type and calculate the average calories
burned for each workout type.

from pyspark.sql.functions import avg
average_calories_by_workout = df_fitness.groupBy("workout_type").agg(avg("calories_burned").alias("average_calories"))
average_calories_by_workout.show()


4. Identify the Day with the Most Steps for Each User
For each user, find the day when they took the most steps.

from pyspark.sql.functions import col, max
max_steps_per_user = df_fitness.groupBy("user_id").agg(max("steps").alias("max_steps"))
most_steps_per_day = df_fitness.alias("df").join(
    max_steps_per_user.alias("max_steps"),
    (col("df.user_id") == col("max_steps.user_id")) & (col("df.steps") == col("max_steps.max_steps"))
)
most_steps_per_day = most_steps_per_day.select(col("df.user_id"), col("df.date"), col("df.steps"))
most_steps_per_day.show()

5. Find Users Who Burned More Than 600 Calories on Any Day
Filter the data to show only the users who burned more than 600 calories
on any day.

users_high_calories = df_fitness.filter(col("calories_burned") > 600).select("user_id").distinct()
users_high_calories.show()

6. Calculate the Average Hours of Sleep per User
Group the data by user_id and calculate the average hours of sleep for
each user.

average_sleep_per_user = df_fitness.groupBy("user_id").agg(avg("hours_of_sleep").alias("average_sleep"))
average_sleep_per_user.show()

7. Find the Total Calories Burned per Day
Group the data by date and calculate the total calories burned by all
users combined for each day.

total_calories_per_day = df_fitness.groupBy("date").agg(sum("calories_burned").alias("total_calories"))
total_calories_per_day.show()

8. Identify Users Who Did Different Types of Workouts
Identify users who participated in more than one type of workout.

from pyspark.sql.functions import countDistinct
distinct_workouts_per_user = df_fitness.groupBy("user_id").agg(countDistinct("workout_type").alias("distinct_workouts"))
users_multiple_workouts = distinct_workouts_per_user.filter(col("distinct_workouts") > 1)
users_multiple_workouts.show()

9. Calculate the Total Number of Workouts per User
Group the data by user_id and count the total number of workouts
completed by each user.

workouts_per_user = df_fitness.groupBy("user_id").count().alias("total_workouts")
workouts_per_user.show()

10. Create a New Column for "Active" Days
Add a new column called active_day that classifies a day as "Active" if
the user took more than 10,000 steps, otherwise classify it as
"Inactive."

from pyspark.sql.functions import when
df_fitness = df_fitness.withColumn("active_day", when(col("steps") > 10000, "Active").otherwise("Inactive"))
df_fitness.show()