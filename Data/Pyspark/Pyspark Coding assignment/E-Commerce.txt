Dataset: E-commerce Transactions

Sample Data:
transaction_id,customer_id,product,category,price,quantity,discount_percentage,transaction_date
1,101,Laptop,Electronics,1000,1,10,2023-08-01
2,102,Smartphone,Electronics,700,2,5,2023-08-01
3,103,Shirt,Fashion,40,3,0,2023-08-02
4,104,Blender,Home Appliance,150,1,15,2023-08-03
5,101,Headphones,Electronics,100,2,10,2023-08-03
6,105,Shoes,Fashion,60,1,20,2023-08-04
7,106,Refrigerator,Home Appliance,800,1,25,2023-08-05
8,107,Book,Books,20,4,0,2023-08-05
9,108,Toaster,Home Appliance,30,1,5,2023-08-06
10,102,Tablet,Electronics,300,2,10,2023-08-06

!pip install pyspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import col,avg,sum,max,count
spark=SparkSession.builder.appName("ECommerce").getOrCreate()
ECommerce_df=spark.read.csv("/content/sample_data/E_commerce.csv", header=True,inferSchema=True)

Exercises:
1. Calculate the Total Revenue per Category
Group the data by category and calculate the total revenue generated by
each category. (Hint: Multiply price by quantity and apply the
discount to get the actual revenue.)

Total_revenue_by_category = ECommerce_df.withColumn("revenue", col("price") * col("quantity") * (1 col("discount_percentage") / 100.0)) \
    .groupBy("category").agg(sum("revenue").alias("total_revenue"))
Total_revenue_by_category.show()

2. Filter Transactions with a Discount Greater Than 10%
Filter the dataset to show only transactions where the discount
percentage is greater than 10%.

filtered_df = ECommerce_df.filter(col("discount_percentage") > 10)
filtered_df.show()

3. Find the Most Expensive Product Sold
Identify the product with the highest individual price.

most_expensive_product_df = ECommerce_df.orderBy(col("price").desc()).limit(1)
most_expensive_product_df.show()

4. Calculate the Average Quantity of Products Sold per Category
Group the data by category and calculate the average quantity of
products sold in each category.

average_quantity_by_category = ECommerce_df.groupBy("category") .agg(avg("quantity").alias("average_quantity"))
average_quantity_by_category.show()

5. Identify Customers Who Purchased More Than One Product
Filter the data to show only customers who purchased more than one
product in a single transaction.

customers_with_multiple_products_df = ECommerce_df.filter(col("quantity") > 1) .select("customer_id") .distinct()
customers_with_multiple_products_df.show()


6. Find the Top 3 Highest Revenue Transactions
Calculate the total revenue for each transaction and identify the top 3
highest revenue transactions.

transactions_with_revenue_df = ECommerce_df.withColumn("total_revenue", col("price") * col("quantity") * (1 - col("discount_percentage") / 100.0))
top_3_revenue_transactions_df = transactions_with_revenue_df .orderBy(col("total_revenue").desc()).limit(3)
top_3_revenue_transactions_df.show()

7. Calculate the Total Number of Transactions per Day
Group the data by transaction_date and calculate the total number of
transactions for each day.

transactions_per_day_df = ECommerce_df.groupBy("transaction_date") .agg(count("transaction_id").alias("total_transactions"))
transactions_per_day_df.show()

8. Find the Customer Who Spent the Most Money
Calculate the total amount spent by each customer and identify the
customer with the highest total spending.

transactions_with_revenue_df = ECommerce_df.withColumn("total_revenue",col("price") * col("quantity") * (1 - col("discount_percentage") / 100.0))
total_spending_per_customer_df = transactions_with_revenue_df.groupBy("customer_id").agg(sum("total_revenue").alias("total_spent"))
top_spending_customer_df = total_spending_per_customer_df.orderBy(col("total_spent").desc()).limit(1)
top_spending_customer_df.show()

9. Calculate the Average Discount Given per Product Category
Group the data by category and calculate the average discount
percentage applied to products in each category.

average_discount_per_category_df = ECommerce_df.groupBy("category").agg(avg("discount_percentage").alias("average_discount"))
average_discount_per_category_df.show()

10. Create a New Column for Final Price After Discount
Add a new column final_price that calculates the total price after
applying the discount ( price - (price * discount_percentage / 100) ).

ECommerce_df_with_final_price = ECommerce_df.withColumn("final_price",col("price") - (col("price") * col("discount_percentage") / 100))
ECommerce_df_with_final_price.show()

