Dataset: Weather Data

Sample Data:
date,city,temperature_c,humidity,wind_speed_kph,condition
2023-01-01,New York,5,60,20,Cloudy
2023-01-01,Los Angeles,15,40,10,Sunny
2023-01-01,Chicago,-2,75,25,Snow
2023-01-02,New York,3,65,15,Rain
2023-01-02,Los Angeles,18,35,8,Sunny
2023-01-02,Chicago,-5,80,30,Snow
2023-01-03,New York,6,55,22,Sunny
2023-01-03,Los Angeles,20,38,12,Sunny
2023-01-03,Chicago,-1,70,18,Cloudy

!pip install pyspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import avg,sum,col,pow
spark=SparkSession.builder.appName("weather_data").getOrCreate()
weather_df=spark.read.csv("/content/weather_data.csv", header=True, inferSchema=True)


Exercises:
1. Find the Average Temperature for Each City
Group the data by city and calculate the average temperature for each
city.

avg_temperature=weather_df.groupBy("city").agg(avg("temperature_c").alias("avg_temperature"))
print("Average temperature for each city: ")
avg_temperature.show()

2. Filter Days with Temperature Below Freezing
Filter the data to show only the days where the temperature was below
freezing (below 0Â°C).

freezing_days=weather_df.filter(col("temperature_c")<0)
print("Days with temperature below freezing: ")
freezing_days.show()

3. Find the City with the Highest Wind Speed on a Specific Day
Find the city with the highest wind speed on a specific day (e.g., 2023-
01-02 ).

highest_wind_speed=weather_df.orderBy(col("wind_speed_kph").desc()).limit(1)
print("City with the highest wind speed on a specific day: ")
highest_wind_speed.show()


4. Calculate the Total Number of Days with Rainy Weather
Count the number of days where the condition was "Rain."

rainy_days_count = weather_df.filter(weather_df["condition"] == "Rain").count()
print(f"Total number of rainy days: {rainy_days_count}")

5. Calculate the Average Humidity for Each Weather Condition
Group the data by condition and calculate the average humidity for each
weather condition (e.g., Sunny, Rainy, Cloudy).

avg_humidity=weather_df.groupBy("condition").agg(avg("humidity").alias("avg_humidity"))
print("Average humidity for each weather condition: ")
avg_humidity.show()


6. Find the Hottest Day in Each City
For each city, find the day with the highest recorded temperature.

hottest_day=weather_df.orderBy(col("temperature_c").desc()).limit(1)
print("Hottest day in each city: ")
hottest_day.show()

7. Identify Cities That Experienced Snow
Filter the dataset to show only the cities that experienced "Snow" in
the condition .

snow_cities=weather_df.filter(weather_df["condition"]=="Snow").select("city").distinct()
print("Cities that experienced snow: ")
snow_cities.show()

8. Calculate the Average Wind Speed for Days When the Condition was Sunny
Filter the dataset for condition = 'Sunny' and calculate the average
wind speed on sunny days.

avg_wind_speed=weather_df.filter(weather_df["condition"]=="Sunny").agg(avg("wind_speed_kph").alias("avg_wind_speed"))
print("Average wind speed for days when the condition was sunny: ")
avg_wind_speed.show()

9. Find the Coldest Day Across All Cities
Identify the day with the lowest temperature across all cities.

coldest_day=weather_df.orderBy(col("temperature_c").asc()).limit(1)
print("Coldest day across all cities: ")
coldest_day.show()

10. Create a New Column for Wind Chill
Add a new column wind_chill that estimates the wind chill based on the
formula: [ \text{Wind Chill} = 13.12 + 0.6215 \times \text{Temperature}
- 11.37 \times (\text{Wind Speed}^{0.16}) + 0.3965 \times
\text{Temperature} \times (\text{Wind Speed}^{0.16}) ]
(Assume wind_speed_kph is the wind speed in kilometers per hour.)


data_with_wind_chill = weather_df.withColumn("wind_chill",
	13.12 + 0.6215 * col("temperature_c") - 11.37 * pow(col("wind_speed_kph"), 0.16) +
	0.3965 * col("temperature_c") * pow(col("wind_speed_kph"), 0.16))
print("New dataset after adding column")
data_with_wind_chill.show()
